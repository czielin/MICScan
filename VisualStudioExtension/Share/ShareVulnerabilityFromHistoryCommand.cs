using System;
using System.ComponentModel.Design;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.TeamFoundation.Git.Extensibility;
using Task = System.Threading.Tasks.Task;
using EnvDTE;
using Microsoft.TeamFoundation.Git.Contracts;
using Microsoft.VisualStudio.Platform.WindowManagement;
using System.Windows.Controls;
using Microsoft.TeamFoundation.MVVM;
using System.Collections;
using LibGit2Sharp;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.VisualStudio.Threading;

namespace VisualStudioExtension.Share
{
    /// <summary>
    /// Command handler
    /// </summary>
    public sealed class ShareVulnerabilityFromHistoryCommand
    {
        private ShareVulnerabilityDialog shareVulnerabilityDialog;
        /// <summary>
        /// Command ID.
        /// </summary>
        public const int CommandId = 4130;

        /// <summary>
        /// Command menu group (command set GUID).
        /// </summary>
        public static readonly Guid CommandSet = new Guid("fcf6e918-3f77-43e7-868a-e4319cdfb9cb");

        /// <summary>
        /// VS Package that provides this command, not null.
        /// </summary>
        private readonly Package package;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShareVulnerabilityFromHistoryCommand"/> class.
        /// Adds our command handlers for menu (commands must exist in the command table file)
        /// </summary>
        /// <param name="package">Owner package, not null.</param>
        /// <param name="commandService">Command service to add command to, not null.</param>
        private ShareVulnerabilityFromHistoryCommand(Package package, OleMenuCommandService commandService)
        {
            this.package = package ?? throw new ArgumentNullException(nameof(package));
            commandService = commandService ?? throw new ArgumentNullException(nameof(commandService));

            var menuCommandID = new CommandID(CommandSet, CommandId);
            var menuItem = new MenuCommand(this.Execute, menuCommandID);
            commandService.AddCommand(menuItem);
        }

        /// <summary>
        /// Gets the instance of the command.
        /// </summary>
        public static ShareVulnerabilityFromHistoryCommand Instance
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the service provider from the owner package.
        /// </summary>
        private IServiceProvider ServiceProvider
        {
            get
            {
                return this.package;
            }
        }

        /// <summary>
        /// Initializes the singleton instance of the command.
        /// </summary>
        /// <param name="package">Owner package, not null.</param>
        public static async Task InitializeAsync(AsyncPackage package)
        {
            // Switch to the main thread - the call to AddCommand in ShareVulnerabilityFromHistoryCommand's constructor requires
            // the UI thread.
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync(package.DisposalToken);

            OleMenuCommandService commandService = await package.GetServiceAsync(typeof(IMenuCommandService)) as OleMenuCommandService;
            Instance = new ShareVulnerabilityFromHistoryCommand(package, commandService);
        }

        /// <summary>
        /// This function is the callback used to execute the command when the menu item is clicked.
        /// See the constructor to see how the menu item is associated with this function using
        /// OleMenuCommandService service and MenuCommand class.
        /// </summary>
        /// <param name="sender">Event sender.</param>
        /// <param name="e">Event args.</param>
        private void Execute(object sender, EventArgs e)
        {
            ThreadHelper.ThrowIfNotOnUIThread();

            shareVulnerabilityDialog = new ShareVulnerabilityDialog(this);
            shareVulnerabilityDialog.ShowDialog();
        }

        public async Task ShowOutputWindow()
        {
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync();
            IVsOutputWindowPane outputWindowPane = (IVsOutputWindowPane)ServiceProvider.GetService(typeof(SVsGeneralOutputWindowPane));
            if (outputWindowPane != null)
            {
                outputWindowPane.Activate();
            }
        }

        public async Task WriteToOutput(string message)
        {
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync();
            IVsOutputWindowPane outputWindowPane = (IVsOutputWindowPane)ServiceProvider.GetService(typeof(SVsGeneralOutputWindowPane));
            if (outputWindowPane != null)
            {
                outputWindowPane.OutputString($"MICScan {DateTime.Now}: {message}{Environment.NewLine}");
            }

            shareVulnerabilityDialog.shareStatusTextBlock.Text = message;
            shareVulnerabilityDialog.shareStatusTextBlock.ToolTip = message;
        }

        public async Task<(Repository, Commit)> GetSelectedCommit()
        {
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync();
            await WriteToOutput("Retrieving selected commit.");
            EnvDTE80.DTE2 dte = ServiceProvider.GetService(typeof(DTE)) as EnvDTE80.DTE2;
            // GUID found via dte.ActiveWindow.ObjectKind
            Guid gitHistoryWindowGuid = new Guid("116D2292-E37D-41CD-A077-EBACAC4C8CC4");
            IVsUIShell vsUIShell = (IVsUIShell)Package.GetGlobalService(typeof(SVsUIShell));
            int toolWindowReturn = vsUIShell.FindToolWindow((uint)__VSFINDTOOLWIN.FTW_fFrameOnly, ref gitHistoryWindowGuid, out IVsWindowFrame vsWindowFrame);
            WindowFrame windowFrame = (WindowFrame)vsWindowFrame;
            ToolWindowView toolWindowView = (ToolWindowView)windowFrame.FrameView;
            // panel is of innaccessible type Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.ContentHostingPanel
            // so use base System.Windows.Controls.Grid
            Grid contentHostingPanel = (Grid)toolWindowView.Content;
            // Type Microsoft.VisualStudio.Platform.WindowManagement.Controls.GenericPaneContentPresenter is internal
            // so use base ContentPresenter
            ContentPresenter genericPaneContentPresenter = contentHostingPanel.Children[1] as ContentPresenter;
            // Microsoft.VisualStudio.TeamFoundation.ToolWindowBase.ToolWindowBaseProxy is innaccessible
            // so use base ContentPresenter
            ContentPresenter toolWindowBaseProxy = (ContentPresenter)genericPaneContentPresenter.Content;
            // Is of type Microsoft.TeamFoundation.Git.Controls.History.HistoryView, 
            // but this class is defined as internal so using base UserControl.
            UserControl historyView = (UserControl)toolWindowBaseProxy.Content;
            // Is of type Microsoft.TeamFoundation.Git.Controls.History.HistoryViewModel, 
            // but this class is defined as internal so using base Microsoft.TeamFoundation.MVVM.ViewModelBase.
            ViewModelBase historyViewModel = (ViewModelBase)historyView.DataContext;
            // Use reflection to get at properties of internal type HistoryViewModel and ObservableCollection<GitHistoryItem>
            object gitHistoryItem = ((IList)historyViewModel.GetType().GetProperty("SelectedItems").GetValue(historyViewModel, null))[0];
            IGitCommit selectedCommit = (IGitCommit)gitHistoryItem.GetType().GetProperty("Commit").GetValue(gitHistoryItem, null);
            IGitExt gitExt = ServiceProvider.GetService(typeof(IGitExt)) as IGitExt;
            Repository repository = new Repository(gitExt.ActiveRepositories.First().RepositoryPath);
            Commit commit = repository.Lookup<Commit>(selectedCommit.Id.Sha);
            await WriteToOutput($"Sharing commit {selectedCommit.Id.Sha} from {repository.Info.Path}.");
            return (repository, commit);
        }
    }
}
