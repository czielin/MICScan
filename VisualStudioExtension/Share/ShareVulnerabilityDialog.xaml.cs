using LibGit2Sharp;
using Microsoft.VisualStudio.PlatformUI;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Threading;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Navigation;

namespace VisualStudioExtension.Share
{
    /// <summary>
    /// Interaction logic for ShareVulnerabilityDialog.xaml
    /// </summary>
    public partial class ShareVulnerabilityDialog : DialogWindow
    {
        List<CweEntry> cweEntries = new List<CweEntry>
        {
            new CweEntry { Title = "Improper Restriction of Operations within the Bounds of a Memory Buffer", Id = 119 },
            new CweEntry { Title = "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", Id = 79 },
            new CweEntry { Title = "Improper Input Validation", Id = 20 },
            new CweEntry { Title = "Exposure of Sensitive Information to an Unauthorized Actor", Id = 200 },
            new CweEntry { Title = "Out-of-bounds Read", Id = 125 },
            new CweEntry { Title = "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", Id = 89 },
            new CweEntry { Title = "Use After Free", Id = 416 },
            new CweEntry { Title = "Integer Overflow or Wraparound", Id = 190 },
            new CweEntry { Title = "Cross-Site Request Forgery (CSRF)", Id = 352 },
            new CweEntry { Title = "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", Id = 22 },
            new CweEntry { Title = "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", Id = 78 },
            new CweEntry { Title = "Out-of-bounds Write", Id = 787 },
            new CweEntry { Title = "Improper Authentication", Id = 287 },
            new CweEntry { Title = "NULL Pointer Dereference", Id = 476 },
            new CweEntry { Title = "Incorrect Permission Assignment for Critical Resource", Id = 732 },
            new CweEntry { Title = "Unrestricted Upload of File with Dangerous Type", Id = 434 },
            new CweEntry { Title = "Improper Restriction of XML External Entity Reference", Id = 611 },
            new CweEntry { Title = "Improper Control of Generation of Code ('Code Injection')", Id = 94 },
            new CweEntry { Title = "Use of Hard-coded Credentials", Id = 798 },
            new CweEntry { Title = "Uncontrolled Resource Consumption", Id = 400 },
            new CweEntry { Title = "Missing Release of Resource after Effective Lifetime", Id = 772 },
            new CweEntry { Title = "Untrusted Search Path", Id = 426 },
            new CweEntry { Title = "Deserialization of Untrusted Data", Id = 502 },
            new CweEntry { Title = "Improper Privilege Management", Id = 269 },
            new CweEntry { Title = "Improper Certificate Validation", Id = 295 },
        };
        private readonly ShareVulnerabilityFromHistoryCommand shareVulnerabilityFromHistoryCommand;

        public ShareVulnerabilityDialog(ShareVulnerabilityFromHistoryCommand shareVulnerabilityFromHistoryCommand)
        {
            InitializeComponent();
            Width = 800;
            Height = 450;
            ResizeMode = ResizeMode.NoResize;
            Title = "Share Vulnerability With MICScan";
            cweEntries = cweEntries.OrderBy(c => c.Title).ToList();
            cweEntries.Insert(0, new CweEntry { Title = "Other" });
            shareButton.IsEnabled = false;
            viewDescriptionHyperlink.IsEnabled = false;
            this.shareVulnerabilityFromHistoryCommand = shareVulnerabilityFromHistoryCommand;
        }

        private void CancelButtonClick(object sender, RoutedEventArgs e)
        {
            Hide();
        }

        private void SardLinkClicked(object sender, RequestNavigateEventArgs e)
        {
            Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri));
            e.Handled = true;
        }

        private void DialogWindow_Loaded(object sender, RoutedEventArgs e)
        {
            cweComboBox.ItemsSource = cweEntries;
            cweComboBox.DisplayMemberPath = "Title";
        }

        private void cweComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (cweComboBox.SelectedItem != null)
            {
                CweEntry selectedEntry = cweComboBox.SelectedItem as CweEntry;
                if (selectedEntry != null)
                {
                    SetShareButtonState();
                    viewDescriptionHyperlink.IsEnabled = selectedEntry.Title != "Other";
                }
            }
        }

        private void SetShareButtonState()
        {
            if
            (
                cweComboBox.SelectedItem != null &&
                (
                    fixesButton.IsChecked == true
                    || introducesButton.IsChecked == true
                )
            )
            {
                shareButton.IsEnabled = true;
            }
            else
            {
                shareButton.IsEnabled = false;
            }
        }

        private void CweDescriptionClicked(object sender, RequestNavigateEventArgs e)
        {
            if (cweComboBox.SelectedItem != null)
            {
                CweEntry selectedEntry = cweComboBox.SelectedItem as CweEntry;
                string url = $"https://cwe.mitre.org/data/definitions/{selectedEntry.Id}.html";
                Process.Start(new ProcessStartInfo(url));
                e.Handled = true;
            }
        }

        private TreeEntry GetPreviousVersionOfFile(Repository repository, TreeEntry treeEntry, Commit commit)
        {
            TreeEntry previousVersion = null;
            bool foundCurrentVersion = false;
            IEnumerable<LogEntry> entries = repository.Commits.QueryBy(treeEntry.Path).OrderByDescending(t => t.Commit.Author.When);
            foreach (LogEntry entry in entries)
            {
                if (foundCurrentVersion)
                {
                    previousVersion = entry.Commit[treeEntry.Path];
                    break;
                }

                if (entry.Commit.Sha.ToLower() == commit.Sha.ToLower())
                {
                    foundCurrentVersion = true;
                }
            }
            return previousVersion;
        }

        private async void ShareButtonClick(object sender, RoutedEventArgs e)
        {
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync();
            shareButton.IsEnabled = false;
            shareProgressBar.Visibility = Visibility.Visible;
            shareProgressBar.Minimum = 0;
            shareProgressBar.Maximum = 1.0;
            await shareVulnerabilityFromHistoryCommand.ShowOutputWindow();
            await shareVulnerabilityFromHistoryCommand.WriteToOutput("Beginning to share vulnerable commit.");
            (Repository repository, Commit commit) = await shareVulnerabilityFromHistoryCommand.GetSelectedCommit();
            await ShareCommit(repository, commit);
            await shareVulnerabilityFromHistoryCommand.WriteToOutput("Upload complete. Thank you for sharing this vulnerability!");
            Close();
        }

        private async System.Threading.Tasks.Task WriteToOutput(string message)
        {
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync();
            await shareVulnerabilityFromHistoryCommand.WriteToOutput(message);
            await TaskScheduler.Default;
        }

        private async System.Threading.Tasks.Task UpdateProgress(double value)
        {
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync();
            shareProgressBar.Value = value;
            await TaskScheduler.Default;
        }

        private async System.Threading.Tasks.Task ShareCommit(Repository repository, Commit commit)
        {
            using (MultipartFormDataContent formData = new MultipartFormDataContent())
            {
                CweEntry selectedEntry = cweComboBox.SelectedItem as CweEntry;
                formData.Add(new StringContent(selectedEntry.Id.ToString()), "CweId");
                formData.Add(new StringContent(commit.Message), "CommitMessage");
                formData.Add(new StringContent(commentTextBox.Text), "Comment");
                formData.Add(new StringContent((fixesButton.IsChecked == true).ToString()), "FixedWithCommit");
                await TaskScheduler.Default;
                int fileCount = 0;
                Commit parentCommit = commit.Parents.First();
                Patch patch = repository.Diff.Compare<Patch>(parentCommit.Tree, commit.Tree);
                int totalChanges = patch.Count();
                foreach (PatchEntryChanges change in patch)
                {
                    fileCount++;
                    string fileName = Path.GetFileName(change.Path);
                    await WriteToOutput($"Retrieving change {fileCount}/{totalChanges} ({fileName})");
                    TreeEntry treeEntry = commit.Tree[change.Path];
                    if (treeEntry != null && treeEntry.TargetType == TreeEntryTargetType.Blob)
                    {
                        Blob blob = treeEntry.Target as Blob;
                        formData.Add(new StringContent(((int)change.Status).ToString()), $"File{fileCount}ChangeKind");
                        formData.Add(new StreamContent(blob.GetContentStream()), $"CurrentFile{fileCount}", treeEntry.Path);
                        TreeEntry previousVersion = GetPreviousVersionOfFile(repository, treeEntry, commit);
                        if (previousVersion != null)
                        {
                            Blob previousBlob = previousVersion.Target as Blob;
                            formData.Add(new StreamContent(previousBlob.GetContentStream()), $"PreviousFile{fileCount}", previousVersion.Path);
                        }
                    }
                    await UpdateProgress(fileCount / (totalChanges + 1.0));
                }

                string apiUrl = "https://micscan.azurewebsites.net/api/Share";
                using (HttpClient httpClient = new HttpClient())
                {
                    await WriteToOutput($"Uploading commit.");
                    HttpResponseMessage response = await httpClient.PostAsync(apiUrl, formData);
                    await UpdateProgress(1.0);
                }
            }
        }

        private void introducesButton_Checked(object sender, RoutedEventArgs e)
        {
            SetShareButtonState();
        }

        private void fixesButton_Checked(object sender, RoutedEventArgs e)
        {
            SetShareButtonState();
        }
    }
}
