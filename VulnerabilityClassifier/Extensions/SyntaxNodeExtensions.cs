using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ParseSardClassic.Extensions
{
    public static class SyntaxNodeExtensions
    {
        public static IEnumerable<SyntaxNode> EarlierSiblings(this SyntaxNode syntaxNode)
        {
            List<SyntaxNode> earlierSiblings = new List<SyntaxNode>();

            if (syntaxNode != null && syntaxNode.Parent != null)
            {
                foreach (var node in syntaxNode.Parent.ChildNodes())
                {
                    if (node != syntaxNode)
                    {
                        earlierSiblings.Add(node);
                    }
                    else
                    {
                        break;
                    }
                }
            }

            return earlierSiblings;
        }

        public static IEnumerable<SyntaxNode> NodesBetween(this SyntaxNode parentNode, SyntaxNode firstChild, SyntaxNode secondChild)
        {
            bool passedFirstChild = false;

            foreach (var childNode in parentNode.ChildNodes())
            {
                if (childNode == secondChild)
                {
                    break;
                }
                if (passedFirstChild)
                {
                    yield return childNode;
                }
                else if (childNode == firstChild)
                {
                    passedFirstChild = true;
                }
            }
        }
    }
}
